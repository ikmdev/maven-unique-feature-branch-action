name: Maven Release Action
description: Utilized for creating releases of projects with unique versioning

# Inputs
inputs:
  ikmdevops_pat:
    description: "PAT TOKEN for IKMDevops User"
    required: true
  ikmdevops_email:
    description: "Email For IKMDevops User"
    default: 'devops@ikm.dev'
  github_token:
    description: "GitHub Token"
    required: true
  gpg_passphrase:
    description: "GPG Passphrase"
    required: true
  gpg_key:
    description: "GPG Key"
    required: true
  ossrh_username:
    description: "OSSRH USERNAME"
    required: true
  ossrh_token:
    description: "OSSRH Token"
    required: true


runs:
  using: "composite"
  steps:

    - name: Testing PR Action
      uses: ./.github/actions/js-pull-request-function@main
      
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{inputs.ikmdevops_pat}}

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-private-key: ${{ inputs.gpg_key }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Cat settings.xml
      shell: bash
      run: |
          cat ~/.m2/settings.xml

    - name: List Secret Keys
      shell: bash
      run: |
        gpg --list-secret-keys

    - name: Set up Node.js (for XML parsing)
      uses: actions/setup-node@v4
      with:
        node-version: '16'

    - name: Install XML2JS
      shell: bash
      run: npm install xml2js

    - name: Extract and Increment Version
      id: increment_version
      shell: bash
      run: |
        # Extract the current version form pom.xml
        CURRENT_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" pom.xml)
        echo "POM_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Split the version into parts
        VERSION_PREFIX=$(echo $CURRENT_VERSION | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+')
        VERSION_SUFFIX=$(echo $CURRENT_VERSION | grep -oE '[a-zA-Z0-9\-]+$')
        
        # Extract the current numeric suffix
        CURRENT_SUFFIX_NUMBER=$(echo $VERSION_SUFFIX | grep -oE '[0-9]+$')
        
        # Increment the suffix number for new development version
        NEW_SUFFIX_NUMBER=$((CURRENT_SUFFIX_NUMBER + 1))
        
        # Form the new versions
        RELEASE_VERSION="$CURRENT_VERSION"
        NEW_DEV_VERSION="$VERSION_PREFIX-ikm-r$NEW_SUFFIX_NUMBER"
        
        # Output the new versions
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT
        echo "NEW_DEV_VERSION=$NEW_DEV_VERSION" >> $GITHUB_OUTPUT

    - name: Print Maven POM project version
      shell: bash
      run: |
        echo "version = ${{ steps.increment_version.outputs.POM_VERSION }}"

    - name: Print Versions
      shell: bash
      run: |
        echo "Release Version: ${{ steps.increment_version.outputs.RELEASE_VERSION }}"
        echo "Next IKM Release Version: ${{ steps.increment_version.outputs.NEW_DEV_VERSION }}"

    - name: Set Release Version
      shell: bash
      run: |
          ./mvnw \
          --batch-mode \
          versions:set \
          -DnewVersion=${{ steps.increment_version.outputs.RELEASE_VERSION }} \
          -DgenerateBackupPoms=false

    - name: Build Release Version
      shell: bash
      run: |
           ./mvnw clean install \
                --batch-mode \
                -e \
                -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                -PcodeQuality,release-enforcement

    - name: Create tag
      shell: bash
      run: |
           git remote set-url origin https://git:${{inputs.ikmdevops_pat}}@github.com/${{github.repository}}.git
           git pull -p
           git add .
           git config user.name "ikmdevops"
           git config user.email ${{inputs.ikmdevops_email}}
           git commit -m 'Release ${{steps.increment_version.outputs.RELEASE_VERSION}}' --amend
           git tag -a ${{steps.increment_version.outputs.RELEASE_VERSION}} -m '${{steps.increment_version.outputs.RELEASE_VERSION}}' --force

    - name: Set New Release Version
      shell: bash
      run: |
          ./mvnw -B versions:set \
          -DnewVersion=${{steps.increment_version.outputs.NEW_DEV_VERSION}} \
          -DgenerateBackupPoms=false \
          --batch-mode

    - name: Commit & Push
      shell: bash
      run: |
           git add .
           git commit -m 'Set next IKM Release version to ${{steps.increment_version.outputs.NEW_DEV_VERSION}}'
           git push -f origin HEAD:master
           git push --tags origin

    - name: Create Release
      shell: bash
      id: create_release
      run: |
          curl -L \
           -X POST \
           -H "Accept: application/vnd.github+json" \
           -H "Authorization: Bearer ${{inputs.github_token}}" \
           -H "X-GitHub-Api-Version: 2022-11-28" \
           https://api.github.com/repos/${{github.repository}}/releases \
          -d '{"tag_name":"${{steps.increment_version.outputs.RELEASE_VERSION}}","name":"Release ${{steps.increment_version.outputs.RELEASE_VERSION}}","body":"Release ${{steps.increment_version.outputs.RELEASE_VERSION}}","draft":false,"prerelease":false,"generate_release_notes":false}'

    - name: Checkout Code Repository
      uses: actions/checkout@v4
      with:
        ref: ${{steps.increment_version.outputs.RELEASE_VERSION}}
        server-id: maven-releases
        server-username: OSSRH_USERNAME
        server-password: OSSRH_PASSWORD

    - name: Maven Build
      shell: bash
      run: |
        ./mvnw clean install \
          --batch-mode \
          -e \
          -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
          -PcodeQuality

    - name: Publish To OSSRH (Maven Central Staging)
      shell: bash
      run: |
          ./mvnw deploy \
              --batch-mode \
              -e \
              -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
              -DskipTests \
              -DskipITs \
              -DrepositoryId=ossrh \
              -DrepositoryIdOSSRH='true' \
              -PstageOSSRH
      env:
        MAVEN_USERNAME: ${{ inputs.ossrh_username }}
        MAVEN_CENTRAL_TOKEN: ${{ inputs.ossrh_token }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.gpg_passphrase }}
